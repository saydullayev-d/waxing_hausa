import React, { useState, useEffect, useRef } from 'react';

const reviews = [
  {
    name: "–î–∞—Ä—è –ö—É–∂–µ–Ω–æ–≤–∞",
    location: "–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
    text: "–ú–∞—Å—Ç–µ—Ä –õ–∏–∑–∞ –æ—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ –±–µ—Ä–µ–∂–Ω–æ —Å–¥–µ–ª–∞–ª–∞. –ü—Ä–∏—Å–ª—É—à–∞–ª–∞—Å—å –∫ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –∏ –¥–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∏–∂–∫–µ. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ª–æ—Å–∞–º–∏. –û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å. –î–∞—Ä—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ —Å—Ç—Ä–∏–∂–∫–µ. –í—Å–µ–º –¥–æ–≤–æ–ª—å–Ω–∞ ‚ù§Ô∏è"
  },
  {
    name: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ü.",
    location: "–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
    text: "–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Å–∞–ª–æ–Ω! –ú–∞—Å—Ç–µ—Ä –ê–Ω–Ω–∞ –ü–∞–∫ –æ—Ç –±–æ–≥–∞! –°—Ä–∞–∑—É –ø–æ–Ω—è–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞, —Å–¥–µ–ª–∞–ª–∞ –ø—Ä–∞–≤–∫—É –±—Ä–æ–≤–µ–π –∏ –º–∞–∫–∏—è–∂ –¥—Ä—É–≥—É, –¥–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–ª–∞—Å—å, –≤–µ–∂–ª–∏–≤–∞—è, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è, —Ä—É–∫–∞–º–∏ —Ç–≤–æ—Ä–∏—Ç —á—É–¥–µ—Å–∞! –ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, –∫–æ–≥–¥–∞ –ª—é–¥–∏ –¥–µ–ª–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É! –ü–µ—Ä—Å–æ–Ω–∞–ª –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–µ–¥–ª–æ–∂–∞—Ç —á–∞–π/–∫–æ—Ñ–µ. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥—ã—Ö!"
  },
  {
    name: "–¢–∞—Ç—å—è–Ω–∞",
    location: "–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
    text: "–ù—É —á—Ç–æ –∂, –í–∏–∫—Ç–æ—Ä–∏—è, –≤—ã –∫—Ä—É—Ç—ã–µ! –í–∏–∫—Ç–æ—Ä–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–Ω–∞—è, –Ω–æ –∏ –º–µ–Ω—è –∏—Ö —Ö–∞—Ä–∏–∑–º–∞ –ø–æ–∫–æ—Ä–∏–ª–∞. –û—á–µ–Ω—å –º–∏–ª—ã–µ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –≤–µ—Å–µ–ª—ã–µ üòç –Ø –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!"
  }
];

const ReviewCard = ({ review }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const maxLength = 150;
  const modalRef = useRef();

  useEffect(() => {
    if (isModalOpen) {
      document.body.classList.add("overflow-hidden");
    } else {
      document.body.classList.remove("overflow-hidden");
    }
    return () => {
      document.body.classList.remove("overflow-hidden");
    };
  }, [isModalOpen]);

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => setIsModalOpen(false);

  const handleOutsideClick = (e) => {
    if (modalRef.current && !modalRef.current.contains(e.target)) {
      closeModal();
    }
  };

  const displayText = review.text.slice(0, maxLength) + (review.text.length > maxLength ? "..." : "");

  return (
    <div className="bg-gray-50 p-6 rounded-lg shadow-md h-[90%] w-full flex flex-col justify-between">
      <div>
        <h3 className="text-4xl font-bold text-gray-800">{review.name}</h3>
        <p className="text-orange-500 text-xl">{review.location}</p>
        <p className="text-gray-600 mt-2 text-xl">{review.text.length > maxLength ? displayText : review.text}</p>
        {review.text.length > maxLength && (
          <button
            onClick={openModal}
            className="text-blue-500 mt-2 text-sm underline"
          >
            –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
          </button>
        )}
      </div>
      {isModalOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
          onClick={handleOutsideClick}
        >
          <div
            ref={modalRef}
            className="bg-white p-6 rounded-lg max-w-md w-full relative"
          >
            <button
              onClick={closeModal}
              className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
            >
              ‚úï
            </button>
            <h3 className="text-xl font-bold text-gray-800">{review.name}</h3>
            <p className="text-orange-500 text-sm">{review.location}</p>
            <p className="text-gray-600 mt-2 text-sm">{review.text}</p>
          </div>
        </div>
      )}
    </div>
  );
};

const ReviewsSection = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  const nextReview = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % reviews.length);
  };

  const prevReview = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + reviews.length) % reviews.length);
  };

  const displayedReviews = () => {
    const reviewsToShow = [];
    for (let i = 0; i < 3; i++) {
      const index = (currentIndex + i) % reviews.length;
      reviewsToShow.push(reviews[index]);
    }
    return reviewsToShow;
  };

  return (
    <div className="max-w-5xl mx-auto py-10">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {displayedReviews().map((review, index) => (
          <ReviewCard key={index} review={review} />
        ))}
      </div>
      <div className="flex justify-center mt-6 space-x-4">
        <button
          onClick={prevReview}
          className="bg-gray-200 p-2 rounded-full hover:bg-gray-300"
        >
          ‚Üê
        </button>
        <button
          onClick={nextReview}
          className="bg-gray-200 p-2 rounded-full hover:bg-gray-300"
        >
          ‚Üí
        </button>
      </div>
    </div>
  );
};

export default ReviewsSection;